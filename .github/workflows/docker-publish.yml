name: Docker image – build, scan & publish (WOLFnik5/weather-subscription-api)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  IMAGE_NAME: ghcr.io/WOLFnik5/weather-subscription-api
  DOCKERHUB_IMAGE: ${{ vars.DOCKERHUB_IMAGE }}
  AUTHOR: ${{ github.actor }}

jobs:
  docker:
    name: Збірка, скан та публікація
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Java/Maven (Spring Boot)
      - name: Setup Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build JAR
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then MVN_FLAGS="-DskipTests"; fi
          ./mvnw -B -ntp clean package $MVN_FLAGS

      # ---------- Docker buildx + metadata
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge,branch=main
            type=sha,format=long
          labels: |
            org.opencontainers.image.title=weather-subscription-api
            org.opencontainers.image.description=Weather Subscription API – container image
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=Apache-2.0

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub (optional)
        if: github.event_name != 'pull_request' && env.DOCKERHUB_IMAGE != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & (conditionally) push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max

      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: table
          exit-code: ${{ github.event_name == 'pull_request' && '0' || '1' }}
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          artifact-name: sbom.spdx.json

      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3
      - name: Sign image with Cosign (keyless)
        if: github.event_name != 'pull_request'
        run: |
          cosign sign --yes ${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          if [[ -n "${{ env.DOCKERHUB_IMAGE }}" ]]; then
            cosign sign --yes ${{ env.DOCKERHUB_IMAGE }}@${{ steps.build.outputs.digest }}
          fi

      - name: Summary
        run: |
          echo "##  Image published" >> $GITHUB_STEP_SUMMARY
          echo "- Digest: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Теги:" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' | sed 's/,/\n- /g' >> $GITHUB_STEP_SUMMARY
